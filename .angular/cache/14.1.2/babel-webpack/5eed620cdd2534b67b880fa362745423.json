{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../footer/footer.component\";\nexport let WarenkorbComponent = /*#__PURE__*/(() => {\n  class WarenkorbComponent {\n    constructor(router) {\n      this.router = router;\n      this.articlesFromLocalStorage = [];\n      this.articlesAmount = 0;\n      this.sum = 0; // Guarda la suma total\n\n      this.total = 0; // El total es la suma\n\n      this.subTotal = 0; // suma - taxes\n\n      this.shipping = 4; // El envío tiene precio estático. es definido por el vendedor. Por el momento he decidido que el envío estará incluido en el precio del artículo porque se deberia codificar una logica basada en las politicas del vendedor. por ejemplo: ventas mayores a 50 euros el envío es gratis de lo contrario costaria 4 ó 5 euros mas o menos.\n\n      this.taxInGermany = 0.19; // almacena los impuestos el \"MwSt(Mehrwertsteuer)\" en alemania es el 19%\n\n      this.taxes = 0;\n      this.counter = 0; // almacena cantidad  de artículos\n    }\n\n    ngOnInit() {\n      this.collectArticlesToCartAfterReload();\n    }\n\n    collectArticlesToCartAfterReload() {\n      // reiniciar el valor de las varialbes globales\n      this.sum = 0;\n      this.taxes = this.taxInGermany;\n      this.total = 0;\n      this.counter = 0;\n      let items = []; // almacena todos los elementos del LocalStorage\n\n      let items2 = []; // almacena solo los elementos que pertenecen al po-pup\n\n      let items3 = []; // almacena solo los elementos que pertenecen al po-pup \"en formato json\"\n\n      const keys = Object.keys(localStorage); // Obtiene las claves de \"Todos los elementos\"\n\n      keys.forEach(elements => {\n        items.push(localStorage.getItem(elements)); // empuja los nombres de los elementos en LocalStorage\n      });\n      items.forEach(elements => {\n        // itera por los objetos individualmente\n        const arrayProp = JSON.parse(elements); //convierte a JSON los objetos\n\n        const arrayKey = Object.keys(arrayProp); // Obtiene las claves de los objetos\n\n        if (arrayKey.includes('inCart')) {\n          // comprueba si los objetos pertenecen al po-pup\n          items2.push(localStorage.getItem(arrayProp.name)); // empuja los elementos que estan en el po-pup\n        }\n      });\n      items2.forEach(elements => {\n        items3 = JSON.parse(elements);\n        this.articlesFromLocalStorage.push(items3);\n      });\n      this.counter = this.articlesFromLocalStorage.length;\n      this.calculateInvoiceDetails();\n    }\n\n    calculateInvoiceDetails() {\n      // suma el precio de todos los artículos\n      for (let i = 0; i < this.articlesFromLocalStorage.length; ++i) {\n        this.sum += this.articlesFromLocalStorage[i].totalPrice;\n      }\n\n      this.taxes = this.taxes * this.sum; // taxes es una constante con valor 0.19 ó (19%)\n      // a la suma total se resta el total de impuestos\n\n      this.subTotal = this.sum - this.taxes;\n      this.total = this.sum; // se resta el impuesto a ala suma total. \"este es lo mas común\"\n      //this.total = this.sum + this.taxes; // Se suma el impuesto a la suma total\n\n      this.shipping = this.shipping;\n    }\n\n    onSelectedAmount(newAmount, articleName) {\n      // reiniciar el valor de las varialbes globales\n      this.sum = 0;\n      this.taxes = this.taxInGermany;\n      this.total = 0;\n      let itemToUpdate = localStorage.getItem(articleName);\n      itemToUpdate = JSON.parse(itemToUpdate);\n      const originalPrice = itemToUpdate.totalPrice / itemToUpdate.amount; // calcula el precio original del artículo\n\n      itemToUpdate.amount = +newAmount; // actualiza la cantidad\n\n      itemToUpdate.totalPrice = originalPrice * itemToUpdate.amount; // actualiza el nuevo valor en lS\n      // selecciona el objeto en el arreglo local para cambiar el valor a mostrar en la interfaz\n\n      const selectedObjToUpdate = this.articlesFromLocalStorage.find(element => {\n        return element.name === articleName;\n      }); // asigna el nuevo valor a mostrar\n\n      selectedObjToUpdate.totalPrice = itemToUpdate.totalPrice; // envia el arreglo actualizado a local Storage\n\n      localStorage.setItem(articleName, JSON.stringify(itemToUpdate)); // actualiza las nuevas cantidades de facturacion\n\n      this.calculateInvoiceDetails();\n    }\n\n    deleteArticle(article) {\n      // reiniciar el valor de las varialbes globales\n      this.sum = 0;\n      this.taxes = this.taxInGermany;\n      this.total = 0; // elimina objeto de lS\n\n      localStorage.removeItem(article); // elimina objeto del arreglo local\n\n      this.articlesFromLocalStorage = this.articlesFromLocalStorage.filter(elements => {\n        return elements.name !== article;\n      });\n      this.counter = this.articlesFromLocalStorage.length; // actualiza las nuevas cantidades de facturación\n\n      this.calculateInvoiceDetails(); // resta uno al contador en cart icon de navbar (Es el ícono del maletin)\n    }\n\n    makeThePayment() {\n      this.router.navigateByUrl('art-zu-bezahlen');\n    }\n\n    refresh() {\n      // itera y guarda únicamente los elementos de LS que son Artículos\n      // por el momento no estoy utilizando este método, arriba en el método \"collectArticlesToCartAfterReload()\" estan los pasos explicados en los comentarios\n      let items = [];\n      let items2 = [];\n      let items3 = [];\n      const keys = Object.keys(localStorage);\n      keys.forEach(elements => {\n        items.push(localStorage.getItem(elements));\n      });\n      items.forEach(elements => {\n        const arrayProp = JSON.parse(elements);\n        const arraykey = Object.keys(arrayProp);\n\n        if (arraykey.includes('inCart')) {\n          items2.push(localStorage.getItem(arrayProp.name));\n        }\n      });\n      items2.forEach(elements => {\n        items3 = JSON.parse(elements);\n        this.articlesFromLocalStorage.push(items3);\n      });\n      this.counter = items2.length;\n    }\n\n  }\n\n  WarenkorbComponent.ɵfac = function WarenkorbComponent_Factory(t) {\n    return new (t || WarenkorbComponent)(i0.ɵɵdirectiveInject(i1.Router));\n  };\n\n  WarenkorbComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: WarenkorbComponent,\n    selectors: [[\"app-warenkorb\"]],\n    decls: 23,\n    vars: 0,\n    consts: [[1, \"certificate-grid\"], [1, \"certificate\"], [\"src\", \"../assets/zertifikate/1.png\", \"alt\", \"Zertifikat 1\"], [\"src\", \"../assets/zertifikate/2.png\", \"alt\", \"Zertifikat 1\"], [\"src\", \"../assets/zertifikate/3.png\", \"alt\", \"Zertifikat 2\"], [\"src\", \"../assets/zertifikate/4.png\", \"alt\", \"Zertifikat 3\"], [\"src\", \"../assets/zertifikate/5.png\", \"alt\", \"Zertifikat 1\"], [\"src\", \"../assets/zertifikate/6.png\", \"alt\", \"Zertifikat 2\"], [\"src\", \"../assets/zertifikate/7.png\", \"alt\", \"Zertifikat 2\"], [\"src\", \"../assets/zertifikate/8.png\", \"alt\", \"Zertifikat 2\"], [\"src\", \"../assets/zertifikate/9.png\", \"alt\", \"Zertifikat 2\"]],\n    template: function WarenkorbComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"section\")(1, \"h2\");\n        i0.ɵɵtext(2, \"Zertifikate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"div\", 0)(4, \"div\", 1);\n        i0.ɵɵelement(5, \"img\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"div\", 1);\n        i0.ɵɵelement(7, \"img\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"div\", 1);\n        i0.ɵɵelement(9, \"img\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"div\", 1);\n        i0.ɵɵelement(11, \"img\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"div\", 1);\n        i0.ɵɵelement(13, \"img\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"div\", 1);\n        i0.ɵɵelement(15, \"img\", 7);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"div\", 1);\n        i0.ɵɵelement(17, \"img\", 8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(18, \"div\", 1);\n        i0.ɵɵelement(19, \"img\", 9);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(20, \"div\", 1);\n        i0.ɵɵelement(21, \"img\", 10);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelement(22, \"app-footer\");\n      }\n    },\n    dependencies: [i2.FooterComponent],\n    styles: [\"h2[_ngcontent-%COMP%]{padding:.5rem 1rem .5rem 3rem;margin-top:2rem;border:1px solid #ddd}.certificate-grid[_ngcontent-%COMP%]{display:grid;grid-template-columns:repeat(3,1fr);gap:30px;margin-top:1.5em;align-items:start}.certificate[_ngcontent-%COMP%]{background:#f9f9f9;border:1px solid #ddd;border-radius:8px;padding:15px;text-align:center;box-shadow:0 2px 6px #0000000d}.certificate[_ngcontent-%COMP%]   img[_ngcontent-%COMP%]{max-width:100%;height:auto;border-radius:5px;margin-bottom:.8em}@media only screen and (max-width: 1500px){.certificate-grid[_ngcontent-%COMP%]{grid-template-columns:repeat(2,1fr)}}@media only screen and (max-width: 1000px){.certificate-grid[_ngcontent-%COMP%]{grid-template-columns:repeat(1,1fr)}}\"]\n  });\n  return WarenkorbComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}